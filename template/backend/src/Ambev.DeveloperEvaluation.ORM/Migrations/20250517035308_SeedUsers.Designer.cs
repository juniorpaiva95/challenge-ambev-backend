// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250517035308_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90397c53-458c-4ded-8c35-067ee36e0c12"),
                            Description = "Cerveja de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Brahma Chopp",
                            Price = 4.99m,
                            SKU = "BRH-CHOPP-350"
                        },
                        new
                        {
                            Id = new Guid("d993bbbf-de1c-4e61-89c4-8a032647e16e"),
                            Description = "Cerveja de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Brahma Duplo Malte",
                            Price = 5.99m,
                            SKU = "BRH-DM-350"
                        },
                        new
                        {
                            Id = new Guid("e13e685d-82fd-4e55-b34b-3d40ee68becb"),
                            Description = "Cerveja de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Skol Pilsen",
                            Price = 4.50m,
                            SKU = "SKL-PIL-350"
                        },
                        new
                        {
                            Id = new Guid("2f36cd3a-0b4c-496a-92a6-41391307be47"),
                            Description = "Cerveja de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Skol Beats",
                            Price = 6.99m,
                            SKU = "SKL-BTS-350"
                        },
                        new
                        {
                            Id = new Guid("1294650b-1575-4295-9377-66f14d43c1b3"),
                            Description = "Refrigerante de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Guaraná Antarctica",
                            Price = 3.99m,
                            SKU = "GUA-ANT-350"
                        },
                        new
                        {
                            Id = new Guid("ba6dec6a-30eb-4987-a72f-e9ad47f360d6"),
                            Description = "Refrigerante de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Guaraná Antarctica Zero",
                            Price = 4.29m,
                            SKU = "GUA-ANT-ZERO-350"
                        },
                        new
                        {
                            Id = new Guid("cf084da8-3cbb-40ae-8146-28e305c3c278"),
                            Description = "Refrigerante de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Pepsi",
                            Price = 3.99m,
                            SKU = "PEP-350"
                        },
                        new
                        {
                            Id = new Guid("313dad6b-2857-4e05-a767-610ed9b5c14f"),
                            Description = "Refrigerante de produção própria da Ambev - 350ml",
                            IsActive = true,
                            Name = "Pepsi Zero",
                            Price = 4.29m,
                            SKU = "PEP-ZERO-350"
                        },
                        new
                        {
                            Id = new Guid("10539897-0d63-4426-be14-fef7ebec6f54"),
                            Description = "Bebida isotônica de produção própria da Ambev - 500ml",
                            IsActive = true,
                            Name = "Gatorade Limão",
                            Price = 5.99m,
                            SKU = "GAT-LIM-500"
                        },
                        new
                        {
                            Id = new Guid("be57af16-8590-4e83-b2b2-8111268511c2"),
                            Description = "Bebida isotônica de produção própria da Ambev - 500ml",
                            IsActive = true,
                            Name = "Gatorade Laranja",
                            Price = 5.99m,
                            SKU = "GAT-LAR-500"
                        },
                        new
                        {
                            Id = new Guid("00ae5627-b295-4cd6-89aa-8f5d058301bb"),
                            Description = "Água mineral de produção própria da Ambev - 500ml",
                            IsActive = true,
                            Name = "AMA Natural",
                            Price = 2.99m,
                            SKU = "AMA-NAT-500"
                        },
                        new
                        {
                            Id = new Guid("ecc512f8-589d-468a-9ef4-adf5798b4a6a"),
                            Description = "Água mineral de produção própria da Ambev - 500ml",
                            IsActive = true,
                            Name = "AMA Com Gás",
                            Price = 3.29m,
                            SKU = "AMA-GAS-500"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItem");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2028bc7-d451-421c-894c-95e31c9f4dbb"),
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@ambev.com",
                            Password = "$2a$11$w8QwQn6QwQn6QwQn6QwQnOQwQn6QwQn6QwQn6QwQn6QwQn6QwQn6",
                            Phone = "(11) 99999-0001",
                            Role = "Admin",
                            Status = "Active",
                            Username = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("0e1819b2-00ac-47e6-bbe3-5dcfbe7ef812"),
                            CreatedAt = new DateTime(2024, 1, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "manager@ambev.com",
                            Password = "$2a$11$w8QwQn6QwQn6QwQn6QwQnOQwQn6QwQn6QwQn6QwQn6QwQn6QwQn6",
                            Phone = "(11) 99999-0002",
                            Role = "Manager",
                            Status = "Active",
                            Username = "Gerente"
                        },
                        new
                        {
                            Id = new Guid("e1fb2153-2a32-437d-82fb-2a440cf34f95"),
                            CreatedAt = new DateTime(2024, 1, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer@ambev.com",
                            Password = "$2a$11$w8QwQn6QwQn6QwQn6QwQnOQwQn6QwQn6QwQn6QwQn6QwQn6QwQn6",
                            Phone = "(11) 99999-0003",
                            Role = "Customer",
                            Status = "Active",
                            Username = "Cliente"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", null)
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
